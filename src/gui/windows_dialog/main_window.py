# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from PyQt5.QtCore import QThread
from PyQt5.QtWidgets import QMessageBox

from PyQt5 import QtWidgets

from .window_main_dialog_render import main_dialog_render
from ...service.common import get_defaul_path


class Ui_MainWindow(object):
    def setupUi(self, MainWindow, wormhole_transfer):
        self._wormholeTransfer = wormhole_transfer
        main_dialog_render(self, MainWindow)

        self._wormholeTransfer._signal.set_code_signal.connect(self.get_code_value)
        self.btnBrowseFile.clicked.connect(self.choose_file_from_location_machine)
        self.btnSendFile.clicked.connect(self.fire_file_remotion)
        self._wormholeTransfer._signal.render_send_percent_number.connect(self.render_send_file_process)

        # receive file function
        self.txtFolderName.setText(get_defaul_path())
        self.btnBrowseFolder.clicked.connect(self.choose_dir_from_location_machine)
        self.btnSetCodeRecv.clicked.connect(self.receive_file_from_remote_machine)
        self._wormholeTransfer._signal.start_receive_file.connect(self.start_receive_file_now)
        self._wormholeTransfer._signal.rec_file_name_and_size.connect(self.rec_file_name_and_size_label)
        self._wormholeTransfer._signal.render_rec_percent_number.connect(self.render_rec_dialog)
        self.customer_send_dialog = DialogThread(self, self._wormholeTransfer, '文件发送结束')
        self.customer_rec_dialog = DialogThread(self, self._wormholeTransfer, '文件接收结束')
        self._wormholeTransfer._signal.open_hint_dialog_finished_transfer_file.connect(self.information_send_box)

    def render_rec_dialog(self, vls):
        split_vls = str(vls).split("||")
        nums = int(split_vls[0])
        if nums == 100:
            self._wormholeTransfer.close_conn()
            self.customer_rec_dialog.start()

        self.progressRecvFile.setValue(nums)
        # human
        self.label_14.setText(str(split_vls[1]))
        # time countdown
        self.label_12.setText("已接收" + "  " + split_vls[2])

    def rec_file_name_and_size_label(self, vls):
        self.label_5.setText(vls)

    def receive_file_from_remote_machine(self):
        code_ = self.txtSecretCodeRecv.text()
        code = '-'.join(code_.split())
        if not code:
            QMessageBox.warning(self, '警告', '密钥输入错误', QMessageBox.Ok)
            return
        """check default path whether is right"""
        path = self.txtFolderName.text()
        if path == '' or path is None:
            message_box = QMessageBox.warning(self, '警告', '请先选择文件保存路径', QMessageBox.Ok)
            if message_box == QMessageBox.Ok:
                print('test this button clicked')
                pass
            return

        if os.path.exists(path):
            pass
        else:
            QMessageBox.warning(self, '警告', '文件路径不正确', QMessageBox.Ok)
            return
        self._wormholeTransfer.open_wormhole(code_)

    def start_receive_file_now(self):
        path_ = self.txtFolderName.text()
        self._wormholeTransfer.accept_offer(path_)

    def get_code_value(self, code):
        self.txtSecretCode.setText(code)

    def choose_file_from_location_machine(self):
        '''get home path , when os is window system that change default path to Desktop so this is remainder'''
        default_dir = get_defaul_path()
        path, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Open file", default_dir,
                                                        "所有文件 (*);;Zip 文件 (*.zip);;Tar 文件 (*.tar)")
        if path:
            try:
                self.txtFileName.setText(path)
                self.progressSendFile.setValue(0)

                self.label_20.setText("")
                self.label_9.setText("已传送")
            except Exception as e:
                print('from where --->', e)

    def choose_dir_from_location_machine(self):
        '''get home path , when os is window system that change default path to Desktop so this is remainder'''
        default_dir = get_defaul_path()
        dir_path = QtWidgets.QFileDialog.getExistingDirectory(self, "选择文件夹", default_dir)
        if dir_path:
            try:

                self.txtFolderName.setText(dir_path)
            except Exception as e:
                print('from where --->', e)

    def fire_file_remotion(self):
        self._wormholeTransfer.open_defer_mode(None)
        path = self.txtFileName.text()
        if path == '' or path is None:
            message_box = QMessageBox.warning(self, '警告', '请先选择需要上传的文件', QMessageBox.Ok)
            if message_box == QMessageBox.Ok:
                print('test this button clicked')
                pass
            return

        if os.path.exists(path):
            pass
        else:
            QMessageBox.warning(self, '警告', '文件不存在', QMessageBox.Ok)
            return
        self._wormholeTransfer.send_file_to_dest(path)

    def render_send_file_process(self, vls):
        split_vls = str(vls).split("||")
        nums = int(split_vls[0])
        if nums == 100:
            self._wormholeTransfer.close_conn()
            self.customer_send_dialog.start()

        self.progressSendFile.setValue(nums)
        self.label_20.setText(split_vls[1])
        self.label_9.setText("已传送" + "  " + split_vls[2])

    def information_send_box(self,msg):
        QMessageBox.information(self, '提示', msg, QMessageBox.Ok)

"""
using multithread open new dialog for user to getting hint customer function here
but if you discard thread will be showing frezze thread event,when then thing happened bad experiment for anyone 
so opotimition it here
"""
class DialogThread(QThread):
    def __init__(self, Window, wormtransfer, msg: str):
        super(DialogThread, self).__init__()
        self.window = Window
        self._wh = wormtransfer
        self.msg = msg

    def run(self):
        self._wh._signal.open_hint_dialog_finished_transfer_file.emit(self.msg)
