# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPalette, QIcon
from PyQt5.QtWidgets import QMessageBox

from ..service.common import get_defaul_path
from .send_dialog_ import send_file_dialog
from .receive_dialog import receive_file
import os

line_text_style_change = "border :1px solid ;border-top-color : blue; border-left-color :blue; border-right-color :blue;border-bottom-color : blue"
line_text_style_origin = "border :1px solid ;border-top-color : gray; border-left-color :gray; border-right-color :gray;border-bottom-color : gray"
line_button_style_origin = "border :5px solid ;border-top-color : gray; border-left-color :purple; border-right-color :purple;border-bottom-color : gray"

class ColorQLineEdit(QtWidgets.QLineEdit):
    def focusInEvent(self, event):
        print("in")
        self.setStyleSheet("background-color: yellow; color: red;")
        # super().focusInEvent(event)


    def focusOutEvent(self, event):
        print("out")
        self.setStyleSheet("background-color: black; color: black;")
        # super().focusOutEvent(event)
class Ui_MainWindow(object):
    def setupUi(self, MainWindow, wormhole_transfer):
        self._wormholeTransfer = wormhole_transfer
        self._send_file_dialog = None
        self.rec_dialog = None
        self.rec_file_dialog = None
        self.send_dialog = None
        palette_window = QPalette()
        palette_window.setColor(QPalette.Window, Qt.gray)

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 368)
        MainWindow.autoFillBackground()
        MainWindow.setPalette(palette_window)
        # MainWindow.setWindowTitle()

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(60, 120, 95, 27))
        self.pushButton.setObjectName("pushButton")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(190, 120, 291, 26))
        self.lineEdit.setObjectName("lineEdit")
        # ColorQLineEdit(self.lineEdit)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(560, 120, 95, 27))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setAutoFillBackground(True)

        self.pushButton_2.setStyleSheet(line_button_style_origin)

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(560, 220, 95, 27))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setIcon(QIcon('../picture/ma-icon-256.png'))
        self.pushButton_3.setStyleSheet(line_button_style_origin)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(190, 220, 291, 26))
        self.lineEdit_2.setObjectName("lineEdit_2")
        """set text color when focus on this text"""
        palette = QPalette()
        palette.setColor(QPalette.Window, Qt.blue)
        # self.lineEdit_2.setStyleSheet(line_text_style_origin)
        # self.lineEdit_2.setPalette(palette)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):

        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "文件发送"))

        self.pushButton.setText(_translate("MainWindow", "选择文件"))
        # click events bind pushButton

        self.pushButton.clicked.connect(self.open_dialog_file)
        self.pushButton_2.setText(_translate("MainWindow", "发送"))
        self.pushButton_2.clicked.connect(self.open_new_dialog_for_send_file)
        self.pushButton_3.setText(_translate("MainWindow", "接收"))
        self.pushButton_3.pressed.connect(self.open_new_dialog_for_receive_file)
        self._wormholeTransfer._signal.start_receive_file.connect(self.when_user_release_receive_button)
        self._wormholeTransfer._signal.close_inner_dialog_event.connect(self.restore_button_click_event)
        self._wormholeTransfer._signal.about_notify_to_user.connect(self.notify_user_finish_transfer_job)

    def open_dialog_file(self):
        '''get home path , when os is window system that change default path to Desktop so this is remainder'''
        default_dir = get_defaul_path()
        path, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Open file", default_dir,
                                                        "所有文件 (*);;Zip 文件 (*.zip);;Tar 文件 (*.tar)")

        if path:
            try:
                self.lineEdit.setText(path)
            except Exception as e:
                print('from where --->', e)

    '''
    send file dialog and display timeline about send speed or net speed when file transfering
    set_code_signal
    '''

    def open_new_dialog_for_send_file(self):
        """get code below
        6-orlando-banjo-conformist-chopper
        """
        path = self.lineEdit.text()
        if path == '' or path is None:
            message_box = QMessageBox.warning(self, '警告', '请先选择需要上传的文件', QMessageBox.Ok)
            if message_box == QMessageBox.Ok:
                print('test this button clicked')
                pass
            return

        if os.path.exists(path):
            pass
        else:
            QMessageBox.warning(self, '警告', '文件不存在', QMessageBox.Ok)
            return
        self._wormholeTransfer.open_defer_mode(None)

        self.send_dialog = QtWidgets.QDialog(self)
        self._send_file_dialog = send_file_dialog(self.send_dialog, self._wormholeTransfer)
        self._wormholeTransfer._signal.set_code_signal.connect(self.get_code_value)
        self.pushButton.setEnabled(False)
        self.pushButton_2.setEnabled(False)
        self.pushButton_3.setEnabled(False)
        self.send_dialog.show()

    def get_code_value(self, code):
        path = self.lineEdit.text()
        self._send_file_dialog.code_label.setText(code)
        """send file here"""
        self._wormholeTransfer.send_file_to_dest(path)

    """receive file dialog"""

    def open_new_dialog_for_receive_file(self):
        """get code"""
        code_ = self.lineEdit_2.text()
        if code_ == '' or code_ is None:
            message_box = QMessageBox.warning(self, '警告', '请先输入密钥', QMessageBox.Ok)
            return

        self._wormholeTransfer.open_wormhole(code_)
        self.rec_dialog = QtWidgets.QDialog(self)
        self.rec_file_dialog = receive_file(self.rec_dialog, self._wormholeTransfer)
        self.pushButton.setEnabled(False)
        self.pushButton_2.setEnabled(False)
        self.pushButton_3.setEnabled(False)
        self.rec_dialog.show()

    def when_user_release_receive_button(self):
        self._wormholeTransfer.accept_offer()

    def restore_button_click_event(self, vls):
        self.pushButton.setEnabled(True)
        self.pushButton_2.setEnabled(True)

        self._wormholeTransfer.close_conn()

        if vls == 1:
            self._wormholeTransfer._signal.about_notify_to_user.emit(1)

        if vls == 3:
            self._wormholeTransfer._signal.about_notify_to_user.emit(3)


    def notify_user_finish_transfer_job(self, vls):
        if vls == 1:
            QMessageBox.about(self, '提示', '文件已完整下载到你的桌面')
        if vls == 3:
            QMessageBox.about(self, '提示', '文件已发送完成')



