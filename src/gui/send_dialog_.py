# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'send_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import time
from PyQt5.QtWidgets import QMessageBox

class send_file_dialog(object):
    def __init__(self, Dialog, wormhole_transfer):
        self.wormhole_t = wormhole_transfer
        self._dialog = Dialog
        Dialog.setObjectName("Dialog")
        Dialog.resize(601, 251)
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setGeometry(QtCore.QRect(60, 70, 241, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.sending_status = QtWidgets.QLabel(Dialog)
        self.sending_status.setGeometry(QtCore.QRect(360, 60, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.sending_status.setFont(font)
        self.sending_status.setObjectName("sending_status")

        self.countdown_timer = QtWidgets.QLabel(Dialog)
        self.countdown_timer.setGeometry(QtCore.QRect(460, 60, 131, 31))
        font1 = QtGui.QFont()
        font1.setPointSize(8)
        self.countdown_timer.setFont(font1)
        self.countdown_timer.setObjectName("countdown_timer")

        self.code_label = QtWidgets.QLabel(Dialog)
        self.code_label.setGeometry(QtCore.QRect(80, 10, 400, 31))
        self.code_label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.code_label.setAutoFillBackground(True)
        """
         selectedText()	Returns the text that has been selected by the user. 
         (For this to work, textInteractionFlag must be set to TextSelectableByMouse).
        """
        self.code_label.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)

        self.code_label.setObjectName("code_label")

        self.file = QtWidgets.QLabel(Dialog)
        self.file.setGeometry(QtCore.QRect(60, 120, 81, 41))
        self.file.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.file.setObjectName("file_name")
        self.file_name = QtWidgets.QLabel(Dialog)
        self.file_name.setGeometry(QtCore.QRect(150, 120, 411, 41))
        self.file_name.setObjectName("file")

        self.transfer_type = QtWidgets.QLabel(Dialog)
        self.transfer_type.setGeometry(QtCore.QRect(60, 160, 81, 41))
        self.transfer_type.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.transfer_type.setObjectName("transfer_type")
        self.transfer_type_2 = QtWidgets.QLabel(Dialog)
        self.transfer_type_2.setGeometry(QtCore.QRect(150, 160, 91, 41))
        self.transfer_type_2.setObjectName("transfer_type_2")

        self.transfer_type_3 = QtWidgets.QLabel(Dialog)
        self.transfer_type_3.setGeometry(QtCore.QRect(250, 160, 100, 41))
        self.transfer_type_3.setObjectName("transfer_type_3")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        #close dialog event bound
        self._dialog.closeEvent = self.listening_close_event

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "获取密钥"))
        self.sending_status.setText(_translate("Dialog", "发送中"))
        self.code_label.setText(_translate("Dialog", "获取密钥中"))

        self.file.setText(_translate("Dialog", "文件名称:"))
        self.file_name.setText(_translate("Dialog", "..."))

        self.transfer_type.setText(_translate("Dialog", "已上传:"))
        self.transfer_type_2.setText(_translate("Dialog", "..."))


        self.wormhole_t._signal.render_send_percent_number.connect(self.dym_set_bar_value)
        self.wormhole_t._signal.close_send_dialog.connect(self.close_send_dialog)
        self.wormhole_t._signal.send_file_name_and_size.connect(self.file_name_and_size_label)


    def dym_set_bar_value(self, vls):
        split_vls = str(vls).split("||")
        nums = int(split_vls[0])
        if nums == 100:
            self.sending_status.setText('发送完成')
        self.progressBar.setValue(nums)
        self.transfer_type_2.setText(split_vls[1])
        self.transfer_type_3.setText(split_vls[2])

    def close_send_dialog(self):
        """if send finished
                then use a massive sleep statement to close dialog after three second"""

        skip_while = 3
        while skip_while > 0:
            time.sleep(1)
            skip_while = skip_while - 1
        self.wormhole_t._signal.close_inner_dialog_event.emit(0)
        self._dialog.close()


    def file_name_and_size_label(self,vls):
        show_vls = vls
        if len(vls) > 46:
            show_vls = vls[0:15]+"...."+vls[-26:]
        self.file_name.setText(show_vls)

    def listening_close_event(self, event):
        self.wormhole_t._signal.close_inner_dialog_event.emit(3)







